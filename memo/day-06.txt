리액트 라이프사이클
   - 페이지에 컴포넌트가 생성되고, 수정되고, 사라지는 순서를 의미한다.
   React에서 클래스 컴포넌트를 사용하면, 9개의 메소드를 통해 작업 흐름을 제어할 수 있다.

마운트
   - constructor : 새로운 컴포넌트를 생성할 때 마다 실행   
   - getDerivedStateFromProps : props를 state에 넣을 때 사용한다. 
   컴포넌트가 마운트될 때와 업데이트가 될 때 실행된다.
   - render : 준비해놓은 UI를 랜더링할 때 실행된다.
   - componentDidMount : 페이지에 컴포넌트가 나타난 직 후 실행된다.

업데이트
   - getDerivedStateFromProps
   - shouldComponentUpdate : true를 리턴 시 다음 라이프사이클 메소드가 계속 실행된다.
   만약 false를 리턴할 경우 작업이 중지된다.
   - getSnapshotBeforeUpdate : 컴포넌트 업데이트 직전의 값을 snapshot에 저장한다.
   또한 업데이트 직전에 실행된다.
   - componentDidUpdate : 컴포넌트 업데이트 직후 실행된다.

언마운트
   - componentWillUnmount : 컴포넌트가 사라지기 직전에 실행되는 메서드





================================================

사이드 이펙트(Side Effect)
  - 함수 내 특정 동작이 함수 외부에 영향을 끼쳐 , 프로그램의 동작을 이해하기 어렵게 만드는 행위
 - fetch , setInterval. setTimeout , ......

참조투명성
 - 입력을 받아서 입력을 받은 그대로 출력하는 함수를 참조 추명하다고 하며 순수 함수(Pure fuhnction)
이라거 한다. 하지만 입력을 받았을 때 다른 결과로 출력하거나 외부 함수에 영향을 끼치는 함수를 참조 불투명하다고 한다, 
이렇게 순수 함수가 아닌 함수에서 side-effect가 발생한다.
- 리액트는 모든 함수를 순수 함수로 유지할 것을 권장하고 있으며, 이로 인해 컴포넌트의 재사용이 좋아지고 오류 검사 및 테스트도 좋아진다.

*투명 : 받은 것을 그대로 출력하는 것
* 불투명 : 함수를 선언할 때 외부에 영향을 받아 출력하는 것

useEffect()
   - Side-Effect를 따로 관리하여 컴포넌트가 최대한 순수 함수를 유지할 수 있도록 도와주는 hook 함수
   - useEffect(() => {}) : 랜더링 될 때 마다
   - useEffect(() => {}, []) : 최초 마운트가 됐을 때 한 번만 실행
   - useEffect(() => {}, [state]) : 의존성 배열의 상태가 바뀌었을 때 마다 실행
